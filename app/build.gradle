plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id "com.apollographql.apollo3" version '3.3.0'
}

apply plugin: 'kotlin-kapt'
apply plugin: 'dagger.hilt.android.plugin'

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('secret.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}


android {
    compileSdk 32

    defaultConfig {
        applicationId "net.nitakan.githubsearcher"
        minSdk 23
        targetSdk 32
        versionCode 1
        versionName "1.0.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
        buildConfigField("String", "GITHUB_PERSONAL_ACCESS_KEY", "\"${localProperties.getProperty("GITHUB_PAT")}\"")
        buildConfigField("String", "GITHUB_GRAPHQL_URL", "\"https://api.github.com/graphql\"")
    }

    signingConfigs {
        release {
            if (keystoreProperties.containsKey('storeFile') &&
                    rootProject.file("${project.rootDir}/" + keystoreProperties.getProperty('storeFile')).exists()) {
                keyAlias keystoreProperties.getProperty('keyAlias')
                keyPassword keystoreProperties.getProperty('keyPassword')
                storeFile file("${project.rootDir}/" + keystoreProperties.getProperty('storeFile'))
                storePassword keystoreProperties.getProperty('storePassword')
            }
        }
    }

    buildTypes {
        debug {
            applicationIdSuffix '.debug'
            versionNameSuffix '-DEBUG'
            signingConfig signingConfigs.debug
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            if (keystoreProperties.containsKey('storeFile')) {
                signingConfig signingConfigs.release
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
        freeCompilerArgs += "-opt-in=kotlin.RequiresOptIn"
    }
    buildFeatures {
        viewBinding true
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion compose_version
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
}

dependencies {

    implementation 'androidx.core:core-ktx:1.8.0'
    implementation 'androidx.appcompat:appcompat:1.4.2'
    implementation 'com.google.android.material:material:1.7.0-alpha02'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.4.1'
    implementation "androidx.navigation:navigation-fragment-ktx:$navigation_version"
    implementation "androidx.navigation:navigation-ui-ktx:$navigation_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"
    implementation "androidx.multidex:multidex:2.0.1"


    // Jetpack Compose
    implementation 'androidx.activity:activity-compose:1.4.0'
    implementation "androidx.compose.ui:ui:$compose_version"
    implementation 'androidx.compose.material3:material3:1.0.0-alpha13'
    implementation "androidx.compose.ui:ui-tooling-preview:$compose_version"
    implementation "androidx.navigation:navigation-compose:$navigation_version"
    androidTestImplementation "androidx.compose.ui:ui-test-junit4:$compose_version"
    debugImplementation "androidx.compose.ui:ui-tooling:$compose_version"
    debugImplementation "androidx.compose.ui:ui-test-manifest:$compose_version"
    implementation "androidx.navigation:navigation-compose:$nav_version"

    // Jetpack compose accompanist
    implementation "com.google.accompanist:accompanist-systemuicontroller:$accompanist_version"
    implementation "com.google.accompanist:accompanist-swiperefresh:$accompanist_version"
    implementation "com.google.accompanist:accompanist-flowlayout:$accompanist_version"

    // Dependency injection
    implementation "com.google.dagger:hilt-android:$hilt_version"
    implementation "androidx.hilt:hilt-navigation-compose:1.0.0"
    kapt "com.google.dagger:hilt-android-compiler:$hilt_version"

    // Image loader
    implementation "io.coil-kt:coil:2.1.0"
    implementation "io.coil-kt:coil-compose:2.1.0"

    // GraphQL client
    implementation "com.apollographql.apollo3:apollo-runtime:3.3.0"

    // OSS
    implementation 'com.valentinilk.shimmer:compose-shimmer:1.0.3'
    implementation "com.apollographql.apollo3:apollo-runtime:$apollo_version"
    implementation "br.com.devsrsouza.compose.icons.android:font-awesome:1.0.0"

    // Test
    testImplementation 'junit:junit:4.13.2'
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines_version"
    testImplementation "org.mockito.kotlin:mockito-kotlin:4.0.0"
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    // For instrumentation tests
    androidTestImplementation "com.google.dagger:hilt-android-testing:$hilt_version"
    kaptAndroidTest "com.google.dagger:hilt-compiler:$hilt_version"

    // For local unit tests
    testImplementation "com.google.dagger:hilt-android-testing:$hilt_version"
    kaptTest "com.google.dagger:hilt-compiler:$hilt_version"
}

apollo {
    packageName.set("net.nitakan.githubsearcher")
}
